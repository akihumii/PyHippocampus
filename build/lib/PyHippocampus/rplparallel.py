import neo  
from neo.io import BlackrockIO 
import numpy as np 
import os 
import glob 
import h5py as h5 
from rplsplit import rplsplit 

'''Note function must be run from within the date folder which contains the raw .nsx files. The file can be added to the python path and imported into a python script using 'from rplparallel import rplparallel'. 

In addition, note that the file requires an analogSignalTimes file which the MATLAB code does not, this is because of the different IO used for the .nsx files. The analogSignalTimes.hdf5 file is generated by the rplsplit function in the rplsplit.py file. 
'''

def rplparallel(auto = True):
	'''Generates a rplparallel.hdf5 file in the session01 directory which contains the following fields: (i) markers, (ii) timestamps, (iii) sample rate, (iv) trialIndices and (v) session start seconds.'''
	nev_file = glob.glob("*.nev")
	if len(nev_file) > 1: 
		print("Too many .nev files. Do not know which one to use.\n")
		return 
	reader = BlackrockIO(nev_file[0])
	ev_rawtimes, _, ev_markers = reader.get_event_timestamps()
	ev_times = reader.rescale_event_timestamp(ev_rawtimes, dtype = "float64") 
	session_start_sec = ev_times[0]
	markers = ev_markers[::2][1:] # Remove the 84 and 0 markers 
	timeStamps = ev_times[::2][1:] # Remove the time corresponding to the 84 and 0 markers. 
	markers = np.array([np.array(markers[i:i+3]) for i in range(0, len(markers), 3)])
	timeStamps = np.array([np.array(timeStamps[i:i+3]) for i in range(0, len(timeStamps), 3)])
	samplingRate = float(analogSignalTimes.sampling_rate) 
	trialIndices = []
	analogSignalTimesFile = glob.glob('analogSignalTimes.hdf5')
	if not analogSignalTimesFile: 
		print('analogSignalTimes.hdf5 does not exist, Running rplsplit to generate analogSignalTimes.hdf5\n')
		rplsplit(generateAnalogSignalTimes = True)
	analogSignalTimesFile = h5.File(analogSignalTimesFile, 'r')
	analogSignalTimes = np.array(['analogSignalTimes'])
	for i in range(len(timeStamp)):
	    temp = []
	    for j in range(len(timeStamps[i])):
	        index = np.where(analogSignalTimes == timeStamps[i][j])[0][0]
	        temp.append(index)
	    trialIndices.append(np.array(temp))
	trialIndices = np.array(trialIndices)
	analogSignalTimesFile.close()
	if 'session01' not in os.listdir('.'): # Checks whether the session01 directory exists, if not creates one. 
		os.mkdir('session01')
	os.chdir('session01') # move to the session01 directory to write and save the rplparallel.hdf5 file there. 
	# Write rplparallel.hdf5 file. 
	f = h5.File('rplparallel.hdf5', 'w')
	markers = f.create_dataset('markers', data = markers)
	session_start_sec = f.create_dataset('session_start_sec', data = session_start_sec)
	timeStamps = f.create_dataset('timeStamps', data = timeStamps)
	samplingRate = f.create_dataset('samplingRate', data = samplingRate)
	trialIndices = f.create_dataset('trialIndices', data = trialIndices)
	f.close() 
	return "rplparallel.hdf5 File created\n"